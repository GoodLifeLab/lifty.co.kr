// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 관리자 역할 enum
enum AdminRole {
  USER
  COACH
  SUPER_ADMIN
}

// 그룹 멤버 역할 enum
enum GroupMemberRole {
  MEMBER
  ADMIN
}

// 기관 내 사용자 역할 enum
enum OrganizationRole {
  MEMBER
  LEADER
  ADMIN
}

// 댓글 모델
model Comment {
  id                    String   @id @default(cuid())
  content               String // 댓글 내용
  authorId              String // 작성자 ID
  userMissionProgressId String // UserMissionProgress ID
  parentId              String? // 부모 댓글 ID (대댓글용)
  isDeleted             Boolean  @default(false) @map("is_deleted") // 삭제 여부
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // 관계
  author              User                @relation(fields: [authorId], references: [id], onDelete: Cascade)
  userMissionProgress UserMissionProgress @relation(fields: [userMissionProgressId], references: [id], onDelete: Cascade)

  // 대댓글 관계
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  phone         String?
  password      String
  emailVerified Boolean   @default(false) @map("email_verified")
  disabled      Boolean   @default(false)
  disabledAt    DateTime? @map("disabled_at")
  role          AdminRole @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLoginAt   DateTime? @default(now()) @map("last_login_at")
  nickName      String?
  name          String?
  position      String?
  profileImage  String?

  // 관계
  organizations    UserOrganization[]
  groupMemberships GroupMember[]
  missionProgress  UserMissionProgress[]
  comments         Comment[]

  @@map("users")
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("email_verification_codes")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?
  createdAt   DateTime @default(now()) @map("created_at")
  startDate   DateTime @default(now()) @map("start_date")
  endDate     DateTime @default(now()) @map("end_date")
  isPublic    Boolean

  // 그룹 멤버십 관계
  memberships GroupMember[]

  // 코스 관계
  courses GroupCourse[]

  @@map("groups")
}

// 그룹 멤버십 테이블 (시작일, 종료일 관리)
model GroupMember {
  id        Int             @id @default(autoincrement())
  userId    String
  groupId   Int
  startDate DateTime        @default(now())
  endDate   DateTime?
  role      GroupMemberRole @default(MEMBER)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // 관계
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  // 복합 유니크 제약조건
  @@unique([userId, groupId])
  @@map("group_members")
}

// 코스 모델
model Course {
  id        String   @id @default(cuid())
  name      String // 코스 이름
  createdAt DateTime @default(now()) @map("created_at")
  startDate DateTime @map("start_date") // 시작일
  endDate   DateTime @map("end_date") // 종료일

  // 그룹 관계
  groups GroupCourse[]

  // 미션 관계
  missions Mission[]

  @@map("courses")
}

// 그룹-코스 다대다 관계 테이블
model GroupCourse {
  id        String   @id @default(cuid())
  groupId   Int
  courseId  String
  createdAt DateTime @default(now()) @map("created_at")

  // 관계
  group  Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // 복합 유니크 제약조건
  @@unique([groupId, courseId])
  @@map("group_courses")
}

// 기관 모델
model Organization {
  id           String   @id @default(cuid())
  name         String // 기관명 (필수)
  contactName  String? // 담당자 이름 (선택)
  contactPhone String? // 담당자 연락처 (선택)
  contactEmail String? // 담당자 이메일 (선택)
  code         String   @unique // 기관 코드
  emailDomain  String? // 이메일 도메인 (선택)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // 관계
  users UserOrganization[]

  @@map("organizations")
}

// 사용자-기관 관계 테이블 (다대다 관계)
model UserOrganization {
  id                String           @id @default(cuid())
  userId            String
  organizationEmail String?          @map("organization_email")
  organizationId    String
  role              OrganizationRole @default(MEMBER) // 사용자의 기관 내 역할
  joinedAt          DateTime         @default(now()) @map("joined_at")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")

  // 관계
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // 복합 유니크 제약조건
  @@unique([userId, organizationId])
  @@map("user_organizations")
}

// 미션 모델
model Mission {
  id          String   @id @default(cuid())
  title       String // 제목
  openDate    DateTime @default(now()) @map("open_date") // 공개 일자
  dueDate     DateTime @map("due_date") // 수행일자
  image       String? // 이미지 URL
  shortDesc   String   @map("short_desc") // 간략 설명
  detailDesc  String   @map("detail_desc") // 상세 설명
  placeholder String? // placeholder 텍스트
  subMissions String[] // 하위 미션 목록 (보여주기 용도)
  courseId    String // 과정 ID
  isPublic    Boolean  @default(false) @map("is_public") // 공개 여부

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // 관계
  course       Course                @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserMissionProgress[]

  @@map("missions")
}

// 사용자 미션 진행 상황
model UserMissionProgress {
  id           String    @id @default(cuid())
  userId       String // 사용자 ID
  missionId    String // 미션 ID
  contents     String? // 텍스트 입력 내용
  contentsDate DateTime? @map("contents_date") // contents 작성일
  images       String[] // 업로드된 이미지 URL 배열
  isChecked    Boolean   @default(false) @map("is_checked") // 체크 여부
  checkedAt    DateTime? @map("checked_at") // 체크한 날짜
  isPublic     Boolean   @default(false) @map("is_public") // 공개 여부
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // 관계
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission  Mission   @relation(fields: [missionId], references: [id], onDelete: Cascade)
  comments Comment[]

  // 복합 유니크 제약조건
  @@unique([userId, missionId])
  @@map("user_mission_progress")
}
