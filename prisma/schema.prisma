// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 그룹 멤버 역할 enum
enum GroupMemberRole {
  MEMBER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  phone         String?
  password      String
  emailVerified Boolean   @default(false) @map("email_verified")
  disabled      Boolean   @default(false)
  disabledAt    DateTime? @map("disabled_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastLoginAt   DateTime? @default(now()) @map("last_login_at")
  name          String?
  position      String?
  profileImage  String?

  // 관계
  organizations    UserOrganization[]
  groupMemberships GroupMember[]

  @@map("users")
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("email_verification_codes")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("password_reset_tokens")
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?
  createdAt   DateTime @default(now()) @map("created_at")
  isPublic    Boolean

  // 그룹 멤버십 관계
  memberships GroupMember[]

  @@map("groups")
}

// 그룹 멤버십 테이블 (시작일, 종료일 관리)
model GroupMember {
  id        Int             @id @default(autoincrement())
  userId    String
  groupId   Int
  startDate DateTime        @default(now())
  endDate   DateTime?
  role      GroupMemberRole @default(MEMBER)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // 관계
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  // 복합 유니크 제약조건
  @@unique([userId, groupId])
  @@map("group_members")
}

// 기관 모델
model Organization {
  id           String   @id @default(cuid())
  name         String // 기관명 (필수)
  department   String // 기관부서 (필수)
  contactName  String? // 담당자 이름 (선택)
  contactPhone String? // 담당자 연락처 (선택)
  code         String   @unique // 기관 코드
  emailDomain  String? // 이메일 도메인 (선택)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // 관계
  users UserOrganization[]

  @@map("organizations")
}

// 사용자-기관 관계 테이블 (다대다 관계)
model UserOrganization {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           String? // 사용자의 기관 내 역할 (선택)
  joinedAt       DateTime @default(now()) @map("joined_at")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // 관계
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // 복합 유니크 제약조건
  @@unique([userId, organizationId])
  @@map("user_organizations")
}
